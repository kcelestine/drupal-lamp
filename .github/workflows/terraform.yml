name: Terraform Provision

on:
  push:
    branches:
      - main

jobs:
  terraform-apply:
    name: Terraform Apply to provision EC2 instance
    runs-on: ubuntu-latest

    outputs:
      EC2_PUBLIC_IP:
    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.10.1  # Specify the Terraform version

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init

    # Run Terraform Plan
    - name: Terraform Plan
      run: terraform plan -var 'aws_ec2_key=${{ secrets.aws_ec2_key }}' -var 'db_pass=${{ secrets.db_pass }}' -var 'my_ip=${{ secrets.my_ip }}' 

    # Run Terraform Apply
    - name: Terraform Apply
      run: terraform apply -var 'aws_ec2_key=${{ secrets.aws_ec2_key }}' -var 'db_pass=${{ secrets.db_pass }}' -var 'my_ip=${{ secrets.my_ip }}' --auto-approve

    # Output EC2 public IP and store it as an artifact
    - name: Save EC2 Public IP
      id: terraform_output
      # run: echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV && echo "${{ env.EC2_PUBLIC_IP }}" > ec2_public_ip.txt
      run: echo "$(terraform output -raw ec2_public_ip)" > ec2_public_ip.txt

    # Upload the EC2 public IP as an artifact for the next job
    - name: Upload EC2 Public IP
      uses: actions/upload-artifact@v4
      with:
        name: ec2_public_ip
        path: ec2_public_ip.txt
